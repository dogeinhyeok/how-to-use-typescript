---
description: 
globs: 
alwaysApply: true
---
# 깃 커밋 메시지 가이드라인

Git 커밋 메시지는 코드 변경 내용을 명확히 기록하기 위한 도구입니다. **Conventional Commits** 규칙을 따르면 메시지가 체계적이고, 나중에 히스토리를 보거나 자동화 도구를 사용할 때 유용합니다. 아래는 그 방법을 정리한 가이드라인입니다.

## 1. 기본 형식

커밋 메시지는 이런 구조로 작성합니다:

```
<유형>[선택적 범위]: <짧은 설명>
<빈 줄>
[선택적 자세한 설명]
<빈 줄>
[선택적 추가 정보]
```

### 예시
```
feat(auth): 사용자 로그인 기능 추가

- 이메일과 비밀번호로 로그인 구현
- 입력값 확인 로직 추가
```

---

## 2. 작성 규칙

### 2.1 첫 줄 (제목)
- **형식**: `<유형>[범위]: <설명>`
- **유형**: 무엇을 했는지 나타냅니다.
  - `feat`: 새로운 기능을 추가했을 때 (예: 버튼 추가).
  - `fix`: 버그나 문제를 고쳤을 때 (예: 오류 수정).
  - `docs`: 문서 수정 (예: 설명서 업데이트).
  - `style`: 코드 모양만 바꿈 (예: 띄어쓰기 정리).
  - `refactor`: 코드 구조 개선 (기능은 그대로).
  - `test`: 테스트 코드 추가나 수정.
  - `chore`: 잡다한 작업 (예: 설정 파일 변경).
- **범위**: 어디에 영향을 미쳤는지 (선택 사항, 예: `auth`, `ui`).
- **설명**: 무엇을 했는지 간단히 (50~72자 정도로 짧게).
- **주의**:
  - 끝에 마침표(`.`)는 붙이지 않아요.
  - "추가하다", "고치다"처럼 명령형으로 쓰는 게 일반적이에요.

#### 예시
```
feat: 검색 기능 추가
fix(ui): 버튼 위치 잘못된 문제 수정
feat(auth): 소셜 로그인 기능 넣음
```

### 2.2 자세한 설명 (본문)
- **언제?**: 첫 줄만으로는 부족할 때.
- **어떻게?**: 첫 줄 아래 한 줄 띄우고 쓰세요.
- **내용**: 무엇을 했는지, 왜 했는지 더 구체적으로 설명.

#### 예시
```
feat: 사용자 프로필 페이지 추가

- 사용자 정보를 보여주는 화면 만듦
- 데이터 가져오는 API 연결
- 오류 메시지 표시 기능 추가
```

### 2.3 추가 정보 (푸터)
- **언제?**: 특별한 사항을 기록할 때.
- **내용**: 중요한 변화나 이슈 번호 같은 걸 넣어요.
- **특별 키워드**:
  - `BREAKING CHANGE`: 이전 버전과 맞지 않는 큰 변화가 있을 때.

#### 예시
```
fix: 데이터 저장 오류 수정

- 잘못된 저장 로직 고침
- 테스트 추가로 문제 안 생기게 확인

BREAKING CHANGE: 기존 데이터 형식 바뀜
이슈 #123
```

#### 예시
```
docs: 설치 방법 문서 업데이트
style: 코드 줄 맞춤 정리
refactor: 로그인 코드 깔끔하게 정리
```

---

## 4. 큰 변화 (Breaking Change)
- **표시**: `BREAKING CHANGE:` 쓰거나, 유형 뒤에 `!` 붙임.
- **의미**: 이전 코드와 안 맞을 정도로 크게 바뀜.

#### 예시
```
feat!: 사용자 데이터 형식 변경

BREAKING CHANGE: 기존 API 호출 방식 안 됨
```

```
feat(auth)!: 인증 방식 새로 만듦
```

---

## 5. 예시 모음

### 간단한 경우
```
feat: 비밀번호 찾기 기능 추가
```

### 범위 포함
```
fix(ui): 메뉴 겹침 문제 고침
```

### 자세히 쓴 경우
```
feat: 다크 모드 기능 추가

- 화면 색상 바꾸는 버튼 만듦
- 사용자 설정에 저장 기능 추가

이슈 #45
```

### 큰 변화 포함
```
fix: 결제 오류 수정

- 결제 데이터 처리 방식 개선
- 테스트로 확인 완료

BREAKING CHANGE: 결제 API 주소 바뀜
```

---

## 6. 쉽게 쓰는 팁
- **한 번에 하나만**: 커밋 하나에 너무 많은 걸 넣지 말고, 작은 단위로 나눠요.
- **실수하면 수정**: `git commit --amend`로 고칠 수 있어요.
- **팀과 맞추기**: 같이 일하는 사람들과 규칙을 정하면 좋아요.

---

## 7. 한글 예시
```
feat: 회원가입 기능 추가

- 회원가입 폼과 버튼 만듦
- 입력값 제대로 됐는지 확인 추가
```

```
fix: 로그인 오류 수정

- 로그인 실패 시 메시지 안 뜨던 문제 고침
```

---

## 요약
- **첫 줄**: `<유형>[범위]: <설명>`으로 간단히.
- **필요하면**: 자세한 설명이나 추가 정보 넣기.
- **목적**: 나중에 봐도 무슨 일 했는지 바로 알 수 있게.

이렇게 쓰면 코드 관리도 편하고, 같이 일하는 사람들도 행복해져요! 질문 있으면 언제든 말해주세요!